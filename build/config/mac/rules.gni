# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/toolchain/toolchain.gni")
import("//build/config/mac/mac_sdk.gni")

# This is used as the base template for both iOS and Mac frameworks..
#
# Arguments
#
#     output_name:
#         (optional) string, name of the generated framework without the
#         .framework suffix. If omitted, defaults to target_name.
#
#     framework_version:
#         (optional) string, version of the framework. Typically this is a
#         single letter, like "A". If omitted, the Versions/ subdirectory
#         structure will not be created, and build output will go directly
#         into the framework subdirectory.
#
# See "gn help shared_library" for more information on arguments supported
# by shared library target.
template("framework_bundle") {
  _target_name = target_name
  _output_name = target_name
  if (defined(invoker.output_name)) {
    _output_name = invoker.output_name
  }

  # If the framework is unversionned, the final _target_name will be the
  # create_bundle(_framework_target), otherwise an action with the name
  # _target_name will depends on the the create_bundle() in order to prepare
  # the versioned directory structure.
  _framework_target = _target_name
  _framework_name = _output_name + ".framework"
  _framework_root_dir = "$root_out_dir/$_framework_name"
  if (defined(invoker.framework_version) && invoker.framework_version != "") {
    _framework_version = invoker.framework_version
    _framework_root_dir += "/Versions/$_framework_version"
    _framework_target = _target_name + "_create_bundle"
  }

  _shared_library_target = target_name + "_shared_library"
  _shared_library_bundle_data = _shared_library_target + "_bundle_data"

  shared_library(_shared_library_target) {
    visibility = [ ":$_shared_library_bundle_data" ]
    forward_variables_from(invoker,
                           "*",
                           [
                             "assert_no_deps",
                             "data_deps",
                             "info_plist",
                             "output_name",
                             "visibility",
                           ])
    output_name = _output_name
    output_prefix_override = true
    output_extension = ""
    output_dir = "$target_out_dir/$_shared_library_target"
  }

  bundle_data(_shared_library_bundle_data) {
    visibility = [ ":$_framework_target" ]
    forward_variables_from(invoker, [ "testonly" ])
    sources = [
      "$target_out_dir/$_shared_library_target/$_output_name",
    ]
    outputs = [
      "{{bundle_executable_dir}}/$_output_name",
    ]
    public_deps = [
      ":$_shared_library_target",
    ]
  }

  _framework_public_config = _target_name + "_public_config"
  config(_framework_public_config) {
    # TODO(sdefresne): should we have a framework_dirs similar to lib_dirs
    # and include_dirs to avoid duplicate values on the command-line.
    visibility = [ ":$_framework_target" ]
    common_flags = [ "-F" + rebase_path("$root_out_dir/.", root_out_dir) ]
    cflags_objc = common_flags
    cflags_objcc = common_flags
    ldflags = common_flags
    lib_dirs = [ root_out_dir ]
    libs = [ _framework_name ]
  }

  create_bundle(_framework_target) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "testonly",
                           ])

    if (defined(_framework_version)) {
      visibility = [ ":$_target_name" ]
    } else {
      forward_variables_from(invoker, [ "visibility" ])
    }

    if (!defined(public_deps)) {
      public_deps = []
    }
    public_deps += [ ":$_shared_library_bundle_data" ]

    public_configs = [ ":$_framework_public_config" ]

    bundle_root_dir = _framework_root_dir
    bundle_resources_dir = "$bundle_root_dir/Resources"
    bundle_executable_dir = "$bundle_root_dir"
  }

  if (defined(_framework_version)) {
    action(_target_name) {
      forward_variables_from(invoker,
                             [
                               "visibility",
                               "testonly",
                             ])
      script = "$root_out_dir/gyp-mac-tool"
      outputs = [
        "$root_out_dir/$_framework_name/Versions/Current",
      ]
      args = [
        "package-framework",
        "$_framework_name",
        "$_framework_version",
      ]
      public_deps = [
        ":$_framework_target",
      ]
    }
  }
}

# Template to combile .xib or .storyboard files.
#
#
# Arguments
#
#     sources:
#         list of string, sources to compile
#
#     ibtool_flags:
#         (optional) list of string, additional flags to pass to the ibtool
template("compile_xibs") {
  action_foreach(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    assert(defined(invoker.sources),
           "Sources must be specified for $target_name")

    ibtool_flags = []
    if (defined(invoker.ibtool_flags)) {
      ibtool_flags = invoker.ibtool_flags
    }

    script = "//build/config/mac/compile_xib.py"
    sources = invoker.sources
    outputs = [
      "$target_gen_dir/{{source_name_part}}.nib",
    ]
    args = [
             "--input",
             "{{source}}",
             "--output",
             rebase_path("$target_gen_dir/{{source_name_part}}.nib"),
           ] + ibtool_flags
  }
}

# Template to compile and package Mac XIB files as bundle data.
#
# Arguments
#
#     sources:
#         list of string, sources to comiple
#
#     output_path:
#         (optional) string, the path to use for the outputs list in the
#         bundle_data step. If unspecified, defaults to bundle_resources_dir.
template("mac_xib_bundle_data") {
  _target_name = target_name
  _compile_target_name = _target_name + "_compile_ibtool"

  compile_xibs(_compile_target_name) {
    forward_variables_from(invoker, [ "testonly" ])
    visibility = [ ":$_target_name" ]
    sources = invoker.sources
    ibtool_flags = [
      "--minimum-deployment-target",
      mac_deployment_target,
      "--target-device",
      "mac",
    ]
  }

  bundle_data(_target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])

    public_deps = [
      ":$_compile_target_name",
    ]
    sources = get_target_outputs(":$_compile_target_name")

    _output_path = "{{bundle_resources_dir}}"
    if (defined(invoker.output_path)) {
      _output_path = invoker.output_path
    }

    outputs = [
      "$_output_path/{{source_file_part}}",
    ]
  }
}

# Template to package a shared library into a Mac framework bundle.
#
# Arguments
#
#     info_plist:
#         string, path to the Info.plist file that will be used for the bundle.
#
#     output_name:
#         (optional) string, name of the generated framework without the
#         .framework suffix. If omitted, defaults to target_name.
#
#     framework_version:
#         (optional) string, version of the framework. Typically this is a
#         single letter, like "A". If omitted, the Versions/ subdirectory
#         structure will not be created, and build output will go directly
#         into the framework subdirectory.
#
# See "gn help shared_library" for more information on arguments supported
# by shared library target.
template("mac_framework_bundle") {
  assert(defined(invoker.deps),
         "Dependencies must be specified for $target_name")
  assert(defined(invoker.info_plist),
         "The Info.plist file must be specified for $target_name")

  _info_plist_target = target_name + "_info_plist"

  # TODO(rsesek): Process Info.plist variables.

  _info_plist_bundle_data = _info_plist_target + "_bundle_data"

  bundle_data(_info_plist_bundle_data) {
    forward_variables_from(invoker, [ "testonly" ])
    sources = [
      invoker.info_plist,
    ]
    outputs = [
      "{{bundle_root_dir}}/Info.plist",
    ]
  }

  framework_bundle(target_name) {
    forward_variables_from(invoker, "*", [ "info_plist" ])

    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":$_info_plist_bundle_data" ]
  }
}

# Template to create a Mac executable application bundle.
#
# Arguments
#
#     info_plist:
#         string, path to the Info.plist file that will be used for the bundle.
#
#     output_name:
#         (optional) string, name of the generated app without the
#         .app suffix. If omitted, defaults to target_name.
template("mac_app_bundle") {
  assert(defined(invoker.info_plist),
         "The Info.plist file must be specified for $target_name")

  _target_name = target_name
  _output_name = target_name
  if (defined(invoker.output_name)) {
    _output_name = invoker.output_name
  }

  _executable_target = target_name + "_executable"
  _executable_bundle_data = _executable_target + "_bundle_data"

  executable(_executable_target) {
    visibility = [ ":$_executable_bundle_data" ]
    forward_variables_from(invoker,
                           "*",
                           [
                             "assert_no_deps",
                             "data_deps",
                             "info_plist",
                             "output_name",
                             "visibility",
                           ])
    output_name = _output_name
    output_dir = "$target_out_dir/$_executable_target"
  }

  bundle_data(_executable_bundle_data) {
    visibility = [ ":$_target_name" ]
    forward_variables_from(invoker, [ "testonly" ])
    sources = [
      "$target_out_dir/$_executable_target/$_output_name",
    ]
    outputs = [
      "{{bundle_executable_dir}}/$_output_name",
    ]
    public_deps = [
      ":$_executable_target",
    ]
  }

  _info_plist_target = target_name + "_info_plist"

  # TODO(rsesek): Process Info.plist variables.

  _info_plist_bundle_data = _info_plist_target + "_bundle_data"

  bundle_data(_info_plist_bundle_data) {
    forward_variables_from(invoker, [ "testonly" ])
    visibility = [ ":$_target_name" ]
    sources = [
      invoker.info_plist,
    ]
    outputs = [
      "{{bundle_root_dir}}/Info.plist",
    ]
  }

  create_bundle(_target_name) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "testonly",
                           ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [
      ":$_executable_bundle_data",
      ":$_info_plist_bundle_data",
    ]

    bundle_root_dir = "$root_out_dir/${_output_name}.app/Contents"
    bundle_resources_dir = "$bundle_root_dir/Resources"
    bundle_executable_dir = "$bundle_root_dir/MacOS"
  }
}

# Template to package a loadable_module into a .plugin bundle.
#
# This takes no extra arguments that differ from a loadable_module.
template("mac_plugin_bundle") {
  assert(defined(invoker.deps),
         "Dependencies must be specified for $target_name")

  _target_name = target_name
  _loadable_module_target = _target_name + "_loadable_module"
  _loadable_module_bundle_data = _loadable_module_target + "_bundle_data"

  _output_name = _target_name
  if (defined(invoker.output_name)) {
    _output_name = invoker.output_name
  }

  loadable_module(_loadable_module_target) {
    visibility = [ ":$_loadable_module_bundle_data" ]
    forward_variables_from(invoker,
                           "*",
                           [
                             "assert_no_deps",
                             "data_deps",
                             "output_name",
                             "visibility",
                           ])
    output_dir = "$target_out_dir"
    output_name = _output_name
  }

  bundle_data(_loadable_module_bundle_data) {
    forward_variables_from(invoker, [ "testonly" ])
    visibility = [ ":$_target_name" ]
    sources = [
      "$target_out_dir/${_output_name}.so",
    ]
    outputs = [
      "{{bundle_executable_dir}}/$_output_name",
    ]
    public_deps = [
      ":$_loadable_module_target",
    ]
  }

  create_bundle(_target_name) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":$_loadable_module_bundle_data" ]

    bundle_root_dir = "$root_out_dir/$_output_name.plugin/Contents"
    bundle_executable_dir = "$bundle_root_dir/MacOS"
  }
}
