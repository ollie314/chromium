// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CC_SURFACES_SURFACE_ID_H_
#define CC_SURFACES_SURFACE_ID_H_

#include <stddef.h>
#include <stdint.h>

#include <functional>

#include "base/format_macros.h"
#include "base/hash.h"
#include "base/strings/stringprintf.h"
#include "cc/surfaces/frame_sink_id.h"

namespace cc {

class SurfaceId {
 public:
  SurfaceId() : local_id_(0), nonce_(0) {}

  SurfaceId(const SurfaceId& other)
      : frame_sink_id_(other.frame_sink_id_),
        local_id_(other.local_id_),
        nonce_(other.nonce_) {}

  // A SurfaceId consists of three components: FrameSinkId, local Id, and nonce.
  // A |frame_sink_id| consists of two components; one is allocated by the
  // display compositor service and one is allocated by the client. The
  // |frame_sink_id| uniquely identifies a FrameSink (and frame source).
  // A |local_id| is a sequentially allocated ID generated by the frame source
  // that uniquely identifies a sequential set of frames of the same size and
  // device scale factor.
  // A |nonce| is a cryptographically secure unguessable token that makes it
  // impossible for an unprivileged frame source to embed another frame source
  // without being explicitly given the surface ID of that frame source from a
  // privileged process.
  SurfaceId(const FrameSinkId& frame_sink_id, uint32_t local_id, uint64_t nonce)
      : frame_sink_id_(frame_sink_id), local_id_(local_id), nonce_(nonce) {}

  bool is_null() const {
    return frame_sink_id_.is_null() && nonce_ == 0 && local_id_ == 0;
  }

  size_t hash() const {
    size_t interim = base::HashInts(local_id_, nonce_);
    return base::HashInts(static_cast<uint64_t>(frame_sink_id_.hash()),
                          static_cast<uint64_t>(interim));
  }

  const FrameSinkId& frame_sink_id() const { return frame_sink_id_; }

  uint32_t local_id() const { return local_id_; }

  uint64_t nonce() const { return nonce_; }

  std::string ToString() const {
    return base::StringPrintf("%s:LocalId(%d, %" PRIu64 ")",
                              frame_sink_id_.ToString().c_str(), local_id_,
                              nonce_);
  }

  bool operator==(const SurfaceId& other) const {
    return frame_sink_id_ == other.frame_sink_id_ &&
           local_id_ == other.local_id_ && nonce_ == other.nonce_;
  }

  bool operator!=(const SurfaceId& other) const { return !(*this == other); }

  bool operator<(const SurfaceId& other) const {
    return std::tie(frame_sink_id_, local_id_, nonce_) <
           std::tie(frame_sink_id_, other.local_id_, other.nonce_);
  }

 private:
  // See SurfaceIdAllocator::GenerateId.
  FrameSinkId frame_sink_id_;
  uint32_t local_id_;
  uint64_t nonce_;
};

struct SurfaceIdHash {
  size_t operator()(const SurfaceId& key) const { return key.hash(); }
};

}  // namespace cc

#endif  // CC_SURFACES_SURFACE_ID_H_
