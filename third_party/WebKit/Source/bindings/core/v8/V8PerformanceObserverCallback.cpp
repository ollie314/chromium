// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "bindings/core/v8/V8PerformanceObserverCallback.h"

#include "bindings/core/v8/ScriptController.h"
#include "bindings/core/v8/V8Binding.h"
#include "bindings/core/v8/V8PerformanceObserver.h"
#include "bindings/core/v8/V8PerformanceObserverEntryList.h"
#include "bindings/core/v8/V8PrivateProperty.h"
#include "core/dom/ExecutionContext.h"
#include "wtf/Assertions.h"

namespace blink {

V8PerformanceObserverCallback::V8PerformanceObserverCallback(v8::Local<v8::Function> callback, v8::Local<v8::Object> owner, ScriptState* scriptState)
    : ActiveDOMCallback(scriptState->getExecutionContext())
    , m_callback(V8PerformanceObserverInnerCallback::create(scriptState->isolate(), callback))
    , m_scriptState(scriptState)
{
    V8PrivateProperty::getPerformanceObserverCallback(scriptState->isolate()).set(scriptState->context(), owner, m_callback->v8Value(scriptState->isolate()));
}

V8PerformanceObserverCallback::~V8PerformanceObserverCallback()
{
}

void V8PerformanceObserverCallback::handleEvent(PerformanceObserverEntryList* entries, PerformanceObserver* observer)
{
    if (!canInvokeCallback())
        return;

    TrackExceptionState exceptionState;
    m_callback->call(m_scriptState.get(), observer, exceptionState, entries, observer);
}

DEFINE_TRACE(V8PerformanceObserverCallback)
{
    visitor->trace(m_callback);
    PerformanceObserverCallback::trace(visitor);
    ActiveDOMCallback::trace(visitor);
}

} // namespace blink
